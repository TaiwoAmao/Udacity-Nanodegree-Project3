version: 2.1

commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y 
  install_awscli:
    description: AWS CLI Installation
    steps:
      - run:
          name: Install Ansible
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy-environment:
   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
   parameters:
     # Add parameter here  
     workflow_id:
       default: "${CIRCLE_WORKFLOW_ID:0:7}"
       type: string
   steps:
     - run:
         name: Destroy environments
         when: on_fail
         command: |
           aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
           aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
           aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"

  revert-migrations:
   description: Revert the last migration if successfully run in the current workflow.
   parameters:
     # Add parameter here  
     workflow_id:
       default: "${CIRCLE_WORKFLOW_ID:0:7}"
       type: string   
   steps:
     - run:
         name: Revert migrations
         when: on_fail
         # Add when this will run
         command: |
           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable

           SUCCESS=$(curl --insecure "https://kvdb.io/16dAiSVamrZg8atoi4XxFi/migration_<<parameters.workflow_id>>")
           if(( $SUCCESS==1 )); 
           then
             cd ~/project/backend
             npm install
             npm run migrations:revert
           
           fi
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt install -y nodejs 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
   docker:
     - image: circleci/node:13.8.0
     # Docker image here
   steps:
     - checkout
     # Restore from cache
     - restore_cache:
          keys: [frontend-test]
     - run:
        name: Frontend test
        command: |
             # Your code here
             cd frontend
             npm install
             npm run test
     - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
               
  test-backend:
   docker:
     - image: circleci/node:13.8.0
     # Docker image here
   steps:
     # Checkout code from git
     - checkout
     # Restore from cache
     - restore_cache:
          keys: [backend-test]
     - run:
        name: Backend test
        command: |
             # Your code here
             cd backend
             npm install
             npm run test
     - save_cache:
          paths: [backend/node_modules]
          key: backend-test
     # Restore from cache
     # Your job code here
  #          
  scan-frontend:
     docker:
  #    # Docker image here
       - image: circleci/node:13.8.0
     # Docker image here
     steps:
      # Checkout code from git
       - checkout
       # Restore from cache
       - restore_cache:
            keys: [scanfrontend]
       - run:
           name: Scan frontend 
           command: |
             # Your code here
             cd frontend
             npm install
             npm audit fix 
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             npm audit fix
       - save_cache:
          paths: [frontend/node_modules]
          key: scanfrontend
    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
  #    # Checkout code from git
       - checkout
       # Restore from cache
       - restore_cache:
           keys: [scanbackend]
       - run:
           name: Scan backend 
           command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --force
             npm audit --audit-level=critical
       - save_cache:
          paths: [backend/node_modules]
          key: scanbackend

  deploy-infrastructure:
    docker:
     # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
     # Checkout code from git
     - checkout
     - run:
         name: Install Dependencies.
         command: |
            yum -y install tar gzip
     - run:
         name: Ensure back-end infrastructure exists
         command: |
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
           aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople
           
     - run:
         name: Ensure front-end infrastructure exist
         command: |
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
           aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
               --tags project=udapeople 
     - run:
         name: Add back-end ip to ansible inventory
         command: |
           # Your code here
           cd .circleci/ansible
           cat inventory.txt
           aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
              cat inventory.txt

     - persist_to_workspace:
         root: ~/
         paths:
           - project/.circleci/ansible/inventory.txt
     # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
   docker:
     # Docker image here that supports Ansible
     - image: cimg/base:stable
   steps:
     # Checkout code from git
     - checkout
     # Add ssh keys with fingerprint
     - add_ssh_keys:
         fingerprints:
           - "fd:68:a5:e7:91:5c:f1:16:97:7c:6e:82:5b:1f:a3:1a"     
     # attach workspace
     - attach_workspace:
         at: ~/
     - install_ansible
     - install_awscli
     - run:
         name: Configure server
         command: |
           # Your code here
           cd .circleci/ansible
           cat inventory.txt
           ansible-playbook -i inventory.txt configure-server.yml
     - destroy-environment

  run-migrations:
   docker:
     # Docker image here that supports NodeJS
     - image: circleci/node:13.8.0
   steps:
     # Checkout code from git
     - checkout
     - run:
         name: Run migrations
         command: |
           cd backend
           npm install
           npm run migrations > migrations_dump.txt
     - run:
         name: Send migration results to kvdb 
         command: |
           # Your code here
           if grep -q "has been executed successfully," ~/project/backend/migrations_dump.txt
           then
            curl --insecure https://kvdb.io/16dAiSVamrZg8atoi4XxFi/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
           fi 
     - destroy-environment
     - revert-migrations
  #   # Here's where you will add some code to rollback on failure      
  deploy-frontend:
   docker:
     # Docker image here that supports AWS CLI
     - image: cimg/base:current
   steps:
     # Checkout code from git
     - checkout
     - add_ssh_keys:
         fingerprints:
           - "fd:68:a5:e7:91:5c:f1:16:97:7c:6e:82:5b:1f:a3:1a"
     - attach_workspace:
         at: ~/
     - install_nodejs
     - install_awscli
     - install_ansible
     - run:
         name: Get backend url
         command: |
           # your code here
           export BACKEND_IP=$(aws ec2 describe-instances \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
           --output text 
           )
           export API_URL="http://${BACKEND_IP}:3030"
           echo "API_URL = ${API_URL}"
           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
           cat frontend/.env
     - run:
         name: Deploy frontend objects
         command: |
           # your code here
           cd frontend
           sudo npm install -g npm@latest
           rm -rf node_modules
           npm install
           npm run build
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
     - destroy-environment
     - revert-migrations
     # Here's where you will add some code to rollback on failure      
                   
  deploy-backend:
    docker:
     # Docker image here that supports AWS CLI
      - image: cimg/base:current
    steps:
     # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fd:68:a5:e7:91:5c:f1:16:97:7c:6e:82:5b:1f:a3:1a"
      - attach_workspace:
          at: ~/
           # your code here
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure  
#
  smoke-test:
   docker:
     - image: cimg/base:stable
     # Lightweight Docker image 
   steps:
     # Checkout code from git
     - checkout
     - install_nodejs
     - install_awscli

     - run:
         name: Backend smoke test.
         command: |
           # your code here
           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
           export API_URL=http://${BACKEND_PUBLIC_IP}:3030
           echo ${BACKEND_PUBLIC_IP}
           echo backend-${CIRCLE_WORKFLOW_ID:0:7}
           echo ${API_URL}
           if curl -s $API_URL/api/status | grep "ok"
           then
             exit 0
           else
             exit 1
           fi
      
     - run:
         name: Frontend smoke test.
         command: |
           # your code here
           FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
           echo $FRONTEND_WEBSITE
           if curl -s $FRONTEND_WEBSITE | grep "Welcome"
           then 
             exit 0
            else
             exit 1
            fi 
     - destroy-environment
     - revert-migrations
  #    # Here's where you will add some code to rollback on failure  
#
  cloudfront-update:
   docker:
     # Docker image here that supports AWS CLI
     - image: amazon/aws-cli
     
   steps:
     # Checkout code from git
     - checkout
     - run:
         name: Install dependencies
         command: |
           # your code here
           export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
           echo "Old Workflow ID": ${OldWorkflowID}
           curl https://kvdb.io/16dAiSVamrZg8atoi4XxFi/old_workflow_id -d "${OLD_WORKFLOW_ID:0:7}"
     - run:
         name: Update cloudfront distribution
         command: |
           # your code here
           aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
     - destroy-environment:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
     - revert-migrations:
         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
     # Here's where you will add some code to rollback on failure  
#
  cleanup:
   docker:
     # Docker image here
     - image: cimg/base:stable
   steps:
     # Checkout code from git
     - checkout
     - install_awscli
     - run:
         name: Get old stack workflow id
         command: |
           # your code here
           export STACKS=($(aws cloudformation describe-stacks --query "Stacks[*].Outputs[?OutputKey=='WorkFlowID'].OutputValue[]" --no-paginate --output text))
            echo -e "All STACKS (ID): ${STACKS[@]} \n"
            echo -e "CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7} \n"
            for OldWorkflowID in ${STACKS[@]}; do
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
                echo "------------  Cleaning up ${OldWorkflowID}  ------------"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                echo -e "---------------   Cleaning Done ---------------\n\n"
              else
                echo -e "----------- Can Not Clean up ${OldWorkflowID} ----------\n\n"
              fi
            done
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
         requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
         requires: [cloudfront-update]